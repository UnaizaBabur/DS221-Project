{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30804,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# INPUT FILE MODULE\nimport pandas as pd\ndef input_module():\n    # Upload a file\n    file_path = input(\"Enter the path of the grades file (CSV/Excel): \")\n    try:\n        if file_path.endswith('.csv'):\n            student_data = pd.read_csv(file_path)\n        elif file_path.endswith(('.xls', '.xlsx')):\n            student_data = pd.read_excel(file_path)\n        else:\n            raise ValueError(\"Unsupported file format. Please provide a CSV or Excel file.\")\n    except FileNotFoundError:\n        print(\"Error: The file was not found. Please check the file path and try again.\")\n        return\n    except Exception as e:\n        print(f\"Error reading the file: {e}\")\n        return\n    \n    print(\"Grades loaded successfully!\")\n    print(student_data.head())\n    return student_data\n\n    # Step 2: Select grading method\n    print(\"\\nSelect grading method:\")\n    print(\"1. Absolute Grading\")\n    print(\"2. Relative Grading\")\n    grading_method = int(input(\"Enter your choice (1 or 2): \"))\n    \n    if grading_method == 1:\n        # Absolute Grading: Input thresholds\n        print(\"\\nDefine grade thresholds (e.g., >=90 = A, >=80 = B, etc.):\")\n        grade_thresholds = {}\n        while True:\n            threshold = input(\"Enter grade (e.g., 'A') and cutoff (e.g., '90') or 'done' to finish: \")\n            if threshold.lower() == 'done':\n                break\n            grade, cutoff = threshold.split('=')\n            grade_thresholds[grade.strip()] = float(cutoff.strip())\n        print(\"Absolute grading thresholds set:\", grade_thresholds)\n        return student_data, grading_method, grade_thresholds\n    \n    elif grading_method == 2:\n        # Relative Grading: Input grade distribution\n        print(\"\\nSpecify desired grade distribution (e.g., A=20%, B=30%, etc.):\")\n        grade_distribution = {}\n        while True:\n            dist = input(\"Enter grade (e.g., 'A') and percentage (e.g., '20') or 'done' to finish: \")\n            if dist.lower() == 'done':\n                break\n            grade, percent = dist.split('=')\n            grade_distribution[grade.strip()] = float(percent.strip())\n        print(\"Relative grading distribution set:\", grade_distribution)\n        return student_data, grading_method, grade_distribution\n    \n    else:\n        raise ValueError(\"Invalid choice. Please select 1 or 2.\")\nresult = input_module()\nprint(\"\\nFinal Output:\", result)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}